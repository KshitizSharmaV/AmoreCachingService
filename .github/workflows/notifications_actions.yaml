name: Build and Push Notifications Service to Google Kubernetes Engine
on:
  workflow_dispatch:
jobs:
  build-push-gcr:
    name: Build and Push to GCP
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: notification
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # # google/cloud-sdk-action action is used to authenticate with Google Cloud Platform (GCP) using a service account key. 
      # # It does not install the Cloud SDK, but it does set the necessary environment variables to allow other actions (such as gcloud) to authenticate with GCP.
      # - name: Authenticate with GCP
      #   uses: google/cloud-sdk-action@v1
      #   with:
      #     credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'
      
      # google-github-actions/auth action is used to authenticate with Google Cloud Platform (GCP) using a service account key. 
      # google-github-actions/auth action is used to authenticate with Google Cloud Platform (GCP) using a service account key. It does not install the Cloud SDK or any other tools, but it does set the necessary environment variables to allow other actions (such as gcloud) to authenticate with GCP.It does not install the Cloud SDK or any other tools, but it does set the necessary environment variables to allow other actions (such as gcloud) to authenticate with GCP.
      # Refer for guide on auth (Service Account Key JSON): https://github.com/google-github-actions/setup-gcloud#authorization
      # Refer for guide on auth (Service Account Key JSON): https://github.com/google-github-actions/setup-gcloud#authorization
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'

      # google-github-actions/setup-gcloud action is used to install and set up the Google Cloud SDK in a GitHub Actions workflow. 
      # It can be used to install a specific version of the Cloud SDK, and to specify which components of the Cloud SDK should be installed.
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Install gke-gcloud-auth-plugin
        run: 'gcloud components install gke-gcloud-auth-plugin'


      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:latest -f Dockerfile_Notifications .

      # - name: Automatic Tagging of Releases
      #   id: increment-git-tag
      #   run: |
      #     bash ./scripts/git_update.sh -v major
      
      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      
      - name: Push Docker Image to Artifact Registry
        env:
          GIT_TAG: latest
        run: |-
          docker tag $IMAGE_NAME:latest us-central1-docker.pkg.dev/$PROJECT_ID/amore-microservices/$IMAGE_NAME:latest
          docker push us-central1-docker.pkg.dev/$PROJECT_ID/amore-microservices/$IMAGE_NAME:latest
  
  deploy-to-gke:
    needs: build-push-gcr
    runs-on: ubuntu-latest
    env: 
      USE_GKE_GCLOUD_AUTH_PLUGIN: true

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'
      with:
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

    - name: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
        location: 'us-central1'
        project_id: ${{ secrets.PROJECT_ID }}
        use_auth_provider: true

    - name: kubectl - Google Cloud GKE cluster.
      uses: ameydev/gke-kubectl-action@master
      env:
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.COMPUTE_ENGINE_SA_KEY }}
        CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
        ZONE_NAME: ${{ secrets.ZONE_NAME }}
      with:
        args: apply -f NotificationService/deployment.yaml
